	N8VEM	equ	1	; 0=MSX scheme, 1=N8VEM scheme
        DEBUG   equ     1

IF DEBUG
coutsp: push    af
        push    bc
        push    de
        push    hl
        call    space
        ld      a, c
        call    cout
        call    space
        pop     hl
        pop     de
        pop     bc
        pop     af
        ret
hexp:   push    af
        push    bc
        push    de
        push    hl
;        cp      0ffh
;        call    nz,phex
        call    phex
        call    const           ; for pause check
        pop     hl
        pop     de
        pop     bc
        pop     af
        ret
ENDIF

DBGHEX  MACRO
IF DEBUG
        call    hexp
ENDIF
        ENDM

DBGCH   MACRO  CH
IF DEBUG
        ld     c, CH
        call   coutsp
ENDIF
        ENDM
;
;============= SD-card procedures ====================================
;
CMD0   equ 40h +  0       ; resets the card
CMD1   equ 40h +  1       ; SEND_OP_CND  (MMC only)
CMD8   equ 40h +  8       ; SEND_IF_COND
CMD9   equ 40h +  9       ; read CSD
CMD10  equ 40h + 10       ; read CID
CMD16  equ 40h + 16       ; set R/W block
CMD17  equ 40h + 17       ; read block
CMD24  equ 40h + 24       ; write block
CMD55  equ 40h + 55       ; next command is ACMDxx
CMD58  equ 40h + 58       ; READ_OCR
CMD59  equ 40h + 59       ; CRC_ON_OFF
ACMD41 equ 40h + 41       ; send host capacity support, init card
;
SD_ADDR	equ	0F762h
SD_ADR2	equ	0F763h
SD_PWR	equ	08h	; POWER OFF/ON=0/1 (positive logic)
SD_CS	equ 	04h 	; NPN inverter, positive logic.
SD_CLK	equ 	02h
SD_DOUT	equ 	01h
SD_DIN	equ	80h 
FTimeout equ	20000
;
; керналь для двух вариантов схем SD card
;
sd_tab0:
sd_wiggle:
	jp	sd_wiggle_msx
sd_fini:
	jp	sd_fini_msx
sd_put:
	jp	sd_put_msx
sd_get:
	jp	sd_get_msx
;
; --------------------------
;
sd_select:
	call	sd_fini		;
	or 	SD_PWR + SD_CS	; select, still idle data
	ld	(SD_ADDR), a
	ret			; af bc de trashed, de=SD_ADDR
;
sd_wiggle_n8vem:
	ld	bc, 255*256 + SD_CLK
	jr	sd_wig_n8vem
;
; sd_fini return: DE=SD_ADDR
;
sd_fini_n8vem:
	ld 	bc, 17*256 + SD_CLK	; clock low high low high ... low, 8 pulses
sd_wig_n8vem:
	ld	de, SD_ADDR 
	ld 	a, SD_DOUT + SD_PWR	; unselected, idle data
L1:	ld	(de), a
	xor	c		; c=SD_CLK
	djnz	L1
	ret			; af bc de trashed
;
sd_put_n8vem:
	push	hl              ; byte from a,  saves HL !
	ld	c, a
	ld 	b, 8
	ld	hl, SD_ADDR 
L3:	ld 	a, 6		; (SD_PWR+SD_CS)/2  	
	rl 	c
	rla			; SD_DOUT is RTC.0
	ld	(hl), a		; clock is low
	or 	SD_CLK
	ld	(hl), a		; rising clock edge
	djnz	L3
	xor	SD_CLK		; and	NOT SD_CLK
	ld	(hl), a		; leave with clock low
	pop	hl
	ret			; af bc trashed
;
sd_get_n8vem:                   ; saves BC !
	push	hl             	; byte to a
	ld	d, 8
	ld	hl, SD_ADDR 
L2:	ld	a, (hl)
	rla			; SD_DIN is RTC.7
	rl	e
	ld	a, SD_PWR + SD_CS + SD_DOUT + SD_CLK
	ld	(hl), a
	and	NOT SD_CLK
	ld	(hl), a
	dec	d
	jr	nz, L2
	ld	a, e
	pop	hl
	ret			; af de trashed
;
sd_wiggle_msx:
	ld	b, 70h
	jr	sd_wig_msx
;
; sd_fini return: DE=SD_ADDR
;
sd_fini_msx:
	ld	b, 8
sd_wig_msx:
	ld	a, SD_PWR
	ld	de, SD_ADDR
	ld	(de), a
	ld	a, 0FFh
	inc	de		; DE=SD_ADR2
LL0:	ld	(de), a		; out & /CLK		 
	djnz	LL0
	dec	de		; DE=SD_ADDR
	xor	a		; for MSX<->NVEM compability!
	ret			; af b de trashed, de=SD_ADDR
;
sd_put_msx:
	ld	bc, SD_ADR2	; byte from a,  saves HL !
	ld	(bc), a		 
	rlca	
	ld	(bc), a
	rlca	
	ld	(bc), a
	rlca	
	ld	(bc), a
	rlca	
	ld	(bc), a
	rlca	
	ld	(bc), a
	rlca	
	ld	(bc), a
	rlca	
	ld	(bc), a		; 84 tstates
	ret			; af bc trashed
;
sd_get_msx:                     ; saves BC !
	ld	de, SD_ADR2
	ld	a, d		; A.D7=1
	ld	(de), a
	ld	(de), a
	ld	(de), a
	ld	(de), a
	ld	(de), a
	ld	(de), a
	ld	(de), a
	ld	(de), a		; 7*9=63 tstates
	ld	a, (de)
	ret			; a=result,  de trashed  
;
; command in a, includes fixed msbits
; arg32 in dehl
; z return, if R1 (in a) is 0
; saves BC !
;
sd_command_no_arg:
	ld	hl, 0
;
sd_command_word_arg:  ; fits in HL
	ld	de, 0
;
sd_command:		; command in a, dword arg in dehl
	push	bc
        push    af
	call	sd_put	; command includes fixed 01 startbits
	ld	a, d	; arg highest (D31..D24) - Xhi
	call	sd_put
	ld	a, e	;             (D23..D16) - Xlo
	call	sd_put
	ld	a, h	;             (D15..D08) - Yhi 
	call	sd_put
	ld	a, l	; arg lowest  (D07..D00) - Ylo
	call	sd_put
        pop     af
        cp      CMD8
        ld	l, 087h
        jr      z,putCRC
        cp      CMD0
	ld	l, 095h	; this crc7 valid for initial CMD0
        jr      z,putCRC
        ld      l,1
putCRC: ld      a,l
       	call	sd_put	; DOUT ends up idle because of the stopbit
	ld hl,FTimeout	; XXX timeout XTAL dependent
	pop	bc
L4:	call	sd_get	; R1 response, when msbit is clear

        DBGHEX

	or	a	; zero and sign valid
	ret	p	; R1 in a. z if ok
	dec	hl
	bit	7, h	; until HL wraps negative
	jr	z, L4
	ret		; 0x80 | ? in a, nz
;
; command response R1
; 0x00 ok
; or bitfield
; 0x01 idle state
; 0x02 erase reset
; 0x04 illegal command
; 0x08 command crc error
; 0x10 erase sequence error
; 0x20 address error
; 0x40 parameter error
; 0x80 timeout (other bits meaningless)
;
; packet token
; 0xFF none yet
; 0xFE ok
; or bitfield
; 0x01 error
; 0x02 controller error
; 0x04 media ecc failed
; 0x08 out of range
; 0x10 card is locked

sd_wait_token:
	ld hl, FTimeout	; XXX timeout XTAL dependent
L5:	call	sd_get	; token is first non-FF
	cp	0FFh
	ret	nz	; token in a
	dec	hl
	bit	7, h	; until HL wraps negative
	jr	z, L5
	ret		; FF in a
;
; INP: DEHL=data position,   BC: buffer address 
;      byte offset in dehl
; OUT: z return if ok, or error code in a
;
sd_write_block:
	ld	a, CMD24	; WRITE_BLOCK
	call	sd_command	; dehl byteaddress, saves BC
	ret	nz		; not "ok"
	ld	h, b	
	ld	l, c		; HL=buffer address
	ld	a, 0FEh		; packet start token
	call	sd_put		; saves HL
	ld	d, 0		; loop counter
WRLOOP:	ld	a, (hl)		; data
	inc	hl
	call	sd_put
	ld	a, (hl)		; data
	inc	hl
	call	sd_put
	dec	d
	jr	nz, WRLOOP	; do the sector (512 bytes)

	ld	a, 0FFh		; 020b
	call	sd_put		; crc16
	ld	a, 0FFh
	call	sd_put		; crcs are not used

	; xxx0___1
	;     010   accepted
	;     101   crc error
	;     110   write error XXX is not reporting _this_ block.

	call	sd_wait_token	; data response or FF if timed out
	and	01Fh
	cp	005h		; "data accepted" ?
	ret

	; write will (?) really start only after 8 more clocks.
	; unselect does an extra get, so not a problem.

;	cp  00Bh              ; "transmission crc error" ?
;	jr z, retry           ; do it again
;
; INP: DEHL=data position,   BC: buffer address 
;      byte offset in dehl
; OUT: z return if ok
;
sd_read_block:
	ld	a, CMD17	; READ_SINGLE_BLOCK
	call	sd_command	; dehl byteaddress, saves BC
	ret	nz		; not "ok"
	call	sd_wait_token	; packet start or FF if timed out, saves BC
	cp	0FEh
	ret	nz		;  or error
	ld	d, b	
	ld	e, c		; DE=buffer address
	ld	b, 0		; loop counter
	ld	hl, SD_ADR2
RDLOOP:	ld	(hl), h		; D7=1
	ld	(hl), h
	ld	(hl), h
	ld	(hl), h
	ld	(hl), h
	ld	(hl), h
	ld	(hl), h
	ld	(hl), h		; 7*9=63 tstates
	ld	a, (hl)		; sd_get
	ld	(de), a
	inc	de
	ld	(hl), h
	ld	(hl), h
	ld	(hl), h
	ld	(hl), h
	ld	(hl), h
	ld	(hl), h
	ld	(hl), h
	ld	(hl), h		; 7*9=63 tstates
	ld	a, (hl)		; sd_get
RDJNZ:	ld	(de), a
	inc	de		; 
	djnz	RDLOOP	; do the sector (512 bytes)
	call	sd_get  ; crc16
;	ld	h, a
	call	sd_get  ;  in HL
;	ld	l, a	; crcs are not used
	xor	a	; zero, no carry
	ret
;
; Check SD-card for busy, then set DEHL to data position 
; (SDC:Byte-address, SDHC:sector number in LBA notation)
;   Input: HL=DriveInfo_array+8,  d: 1=SDC, 3=SDHC
;  Output: DEHL=data position,   BC: buffer address 
;
sd_setup:
        push    de
	call	sd_select	; saves HL
sd_wait_busy:
	ld bc, FTimeout	; XXX timeout XTAL dependent
L6:	call	sd_get	; 8 clocks. data output activates after 1 clock

        DBGHEX
        DBGCH '|'

	inc	a	; FF is not busy
	jr	z, LL6	; z, ok. a=0
	dec	bc	; else busy or something
	bit	7, b	; until HL wraps negative
	jr	z, L6
        pop     de
	ret		; nz, timeout
LL6:
	ld	bc, 0FFFBh      ; -5
	add	hl, bc
	ld	c, (hl)
	inc	hl
	ld	b, (hl)		; bc=buffer adress
        inc	hl	
	ld	e, (hl)		; lba+0
	inc	hl
        ld      d, (hl)		; lba+1
	inc     hl
        ld      a, (hl)		; lba+2
	inc	hl
        ld      h, (hl)		; lba+3
        ld      l, a
	ex	de, hl
        pop     af              ; a = 1=SDC, 3=SDHC
        sub     3
        ret	z	        ; SDHC - skip LBA*512
;
; DEHL (D31..D00) * 512 = DEHL*2*256 
;
	ld      a,e
	add	hl,hl
	adc	a,a	        ; AHL=EHL*2
	ld	d,a
	ld	e,h
	ld	h,l
        xor	a               ; result=OK
	ld	l,a	        ; DEHL=EHL*256
	ret
;
;   Input: HL=DriveInfo_array+8,  d: 1=SDC, 3=SDHC
;
sd_write:			; 02a3
	call	sd_setup	; select, wait busy, calculate byte offset
	call	z, sd_write_block
	jr	sd_done
;
;   Input: HL=DriveInfo_array+8,  d: 1=SDC, 3=SDHC
;
sd_read:
	call	sd_setup
	call	z, sd_read_block
;
sd_done:			; 02b1
	push	af
	call	sd_fini		; return de=SD_ADDR
	ld	a, SD_PWR
	ld	(DE), a		; unselect : /CS high, clock and dout low
	ld	a,(device)	; type of SDC/SDHC
	ld	c,a
	pop	af
	ret	nz		; rw_fail
	xor	a
	ret 
;
delay2:	ld	bc, 0
del2:	dec	bc		
	ld	a, b
	or	c
	ret	z
	jr	del2	; delay (6+4+4+5+12=31)*256*256 tstates	  (~0.4s at 5MHz)
;
; SD probe, disappears on mount
;
sd_init:xor	a
	ld	(SD_ADDR), a	; power off
;
; TODO: select low speed XTAL
;
	ld	b, a
	ld	c, a
	inc	a
	ld	(device),a	; old SDc
delay0:	dec	bc		
	ld	a, b
	or	c
	jr	nz, delay0	; delay (6+4+4+12=26)*65536 tstates (~0.4s at 5MHz)
delay1:	ld	a, SD_PWR
	ld	(SD_ADDR), a	; power on
	djnz	delay1		; delay (7+12+13=32)*256 tstates (~50ms at 5MHz)
sdinit:	call	sd_wiggle	; power on, wiggle
	call	sd_select	; ignore busy condition
	call	sd_init_1
	jr	sd_done		
;
; High level card init for SDC(inp C=0)/SDHC(inp C=40h)
;
CMD55ACMD41:
        ld      b,50            ; 50 tries
sd_checkready:

        DBGCH   '#'

	ld	a, CMD55	; APP_CMD
	call	sd_command_no_arg  ; saves BC
	and	11111110b	; ~001h
	ret	nz		; not "idle" nor "ok"

        DBGCH   '~'

        ld      d, c            ; d=SDHC flag (40h) or SDC v1.0 flag (0)
        ld      e, a
	ld	h, a            ; A=0
	ld	l, a
        ld	a, ACMD41	; SD_SEND_OP_COND (with parameter)
	call	sd_command      ; saves BC
        cp      001h
	jr      nz,sd_idle
        djnz    sd_checkready	; wait, while idle
sd_idle:
	or	a
        ret
;
; z return if ok
; idle, ready, size, set block size
sd_init_1:			;
	ld	a, CMD0		; GO_IDLE_STATE
	call	sd_command_no_arg
	cp	001h
	ret	nz		; not "idle"

        DBGCH   '*'

	ld	a, CMD8		; SEND_IF_COND - check SD hardware
	ld	hl,01AAh
	call	sd_command_word_arg

        DBGCH   '='
        DBGHEX

	dec	a
	jr	z, newcard
        cp      4               ; RC was 5 = unknown CMD (4) + IDLE (1)
        ld      a, CMD0         ; init card again
        call    z,sd_command_no_arg
        ld      c, 0            ; C=0 for SDC v1.0
        call    CMD55ACMD41
	ret	nz		; not ok

        DBGCH   '^'

        ld      a, CMD16        ; set sector length
	ld	hl,0200h
	call	sd_command_word_arg
        ret     nz
        jr	getcsd
;
newcard:call	sd_get
	call	sd_get
	call	sd_get

        DBGCH   '='
        DBGHEX

	call	sd_get

        DBGCH   '='
        DBGHEX

	cp	0AAh
	ret	nz		; modern card with compliant HW normal response is (0x01,0x00,0x00,0x01,0xAA)

        DBGCH   '('

	ld	a, CMD59	; CRC_ON_OFF
	call	sd_command_no_arg
        ld      c, 40h          ; C=40h for SDC v2.0 and SDHC
        call    CMD55ACMD41
	ret	nz		; not ok
;
; TODO: select full speed XTAL
;

        DBGCH   ')'

	ld	a, CMD58	; READ_OCR
	call	sd_command_no_arg
	ret	nz		; not ok
	call	sd_get

        DBGCH   '='
        DBGHEX

	and	040h    	; NZ if SDHC  ; 0 (SCD-nonLBA) or 40h (SDHC-LBA)
        ld      a,1
        jr      z,sdini2
        ld      a,3
sdini2:	ld	(device),a	; 1=SDc; 3=SDHC
	call	sd_get
	call	sd_get
	call	sd_get
getcsd:

        DBGCH   '-'

	ld	a, CMD9		; SEND_CSD
	call	sd_command_no_arg
	ret	nz		; not ok

        DBGCH   '+'

	call	sd_wait_token	; packet start or FF if timed out
	cp	0FEh
	ret	nz		;  or error

        DBGCH   '/'

	ld	hl, csdbuf	; XXX
	ld	b, 16+2         ; including crc16
L7:
	call	sd_get
	ld	(hl), a		; read CSD to csdbuf
	inc	hl
	djnz	L7		; do 16+2 bytes
;
; CSD in csdbuf. calculate something later
;
	xor	a
	ret
;
; Calculate max LBA through CSD data
;
;0   CSD_Structure:     byte;       // D7=D6=Capacity{00=Standard,01=HighCapacity} D5:D0=reserved=00000
;Standard (CSD v1.0):
;1   TAAC:              byte;       // D7:D0=TAAC[7:0]
;2   NSAC:              byte;       // D7:D0=NSAC[7:0]
;3   TRAN_SPEED:        byte;       // D7:D0=TRAN_SPEED[7:0]
;4   CCC:               byte;       // D7:D0=CCC[11:4]
;5   CCC_READ_BL_LEN:   byte;       // D7:D4=CCC[3:0]  D3:D0=READ_BL_LEN[3:0]
;6   BITFIELD1_CSIZE:   byte;       // D7=RD_BL_PARTIAL  D6=WR_BL_MISALIGN  D5=RD_BL_MISALIGN  D4=DSR_IMP  D3:D2=reserved=00  D1:D0=CSIZE[11:10]
;7   CSIZE:             byte;       // D7:D0=C_SIZE[9:2]
;8   CSIZE_VDD:         byte;       // D7:D6=C_SIZE[1:0]  D5:D3=VDD_R_CURR_MIN[2:0]  D2:D0=VDD_R_CURR_MAX[2:0]
;9   VDD_CSIZE_MULT:    byte;       // D7:D5=VDD_W_CURR_MIN[2:0]  D4:D2=VDD_W_CURR_MAX[2:0]  D2:D0=C_SIZE_MULT[2:1]
;10  CSIZE_MULT_SECSIZE:byte;       // D7=C_SIZE_MULT[0]  D6=ERASE_BLK_EN  D5:D0=SECTOR_SIZE[6:1]
;11  SECSIZE_WPGRP_SIZE:byte;       // D7=SECTOR_SIZE[0]  D6:D0=WP_GRP_SIZE[6:0]
;12  WPGRP_ENA_WRBL_LEN:byte;       // D7=WP_GRP_ENABLE   D6:D5=reserved=00  D4:D2=R2W_FACTOR[2:0]  D1:D0=WRITE_BL_LEN[3:2]
;13  WRBL_LEN__ZERO:    byte;       // D7:D6=WRITE_BL_LEN[1:0]  D5=WRITE_BL_PARTIAL=0  D4:D0=reserved=00000
;14  BITFIELD2:         byte;       // D7=FILE_FORMAT_GRP  D6=COPY  D5=PERM_WRITE_PROTECT  D4=TMP_WRITE_PROTECT  D3:D2=FILE_FORMAT[1:0]  D1:D0=reserved=00
;15  CRC:               byte;       // D7:D1= CRC-7 checksum   D0=1
;
;High Capacity (CSD v2.0):
;1   TAAC:              byte;       // D7:D0=TAAC[7:0]
;    ... the same
;6   BITFIELD1:         byte;       // D7=RD_BL_PARTIAL  D6=WR_BL_MISALIGN  D5=RD_BL_MISALIGN  D4=DSR_IMP  D3:D0=0000=reserved=0000
;7   CSIZE_RES:         byte;       // D7:D6=00=reserved  D5:D0=CSIZE[21..16]
;8   CSIZE_R01:         byte;       // D7:D0=CSIZE[15..8]
;9   CSIZE_R02:         byte;       // D7:D0=CSIZE[7..0]
;10  ERABLKLEN_SECSIZE: byte;       // D7=0=reserved  D6=ERASE_BLK_EN  D5:D0=SECTOR_SIZE[6:1]
;    ... the same
;
;Standard (CSD v1.0):
; Capacity (bytes) = ("C_SIZE"+1) * (2 ^ (CSIZE_MULT+2)) * (2^READ_BL_LEN) = ("C_SIZE"+1) * (2 ^ (CSIZE_MULT+2+READ_BL_LEN))
; Capacity (512b sectors) = MaxLBA = ("C_SIZE"+1) * (2 ^ (CSIZE_MULT+READ_BL_LEN-7))
;
;High Capacity (CSD v2.0):
; Capacity (bytes) = ("C_SIZE"+1) * 512 * 1024 = ("C_SIZE"+1) * 256 * 256 * 8
; Capacity (512b sectors) = MaxLBA = ("C_SIZE"+1) * 256 * 4
;   SDHC min C_SIZE = 1010h (2Gb+8.5Mb),  SDHC max C_SIZE = 0FF5Fh (32Gb-80Mb)
;
;Standard:
; c_size = ix[8] + ix[7] * 256 + (ix[6] & 0x03) * 65536
; c_size >>= 6   ( 12 bits )
;
CalcMaxLBA:
	push	hl         ; first, try SDHC calculation
	push	af
	ld 	hl, csdbuf+9
        ld      e, (hl)
	dec	hl         ; HL=csdbuf+8
        ld      d, (hl)	   
	dec	hl
	ld	a, (hl)	   ; A=(csdbuf+7)=HiWord("C_SIZE") {D5:D0}
	and	3Fh        ; 
	ld	hl, 1
	add	hl, de	   ; HL=LoWord("C_SIZE")+1 , sets CY
        ld      bc, 0A00h  ; B=10=*1024, C=0
	adc	a, c       ; A=A+CY		
	ld	e, a       ; EHL=("C_SIZE"+1)
        ld	a,(device) ; 1=SDc; 3=SDHC
        cp      3
        jr      z, sl_dehl ; if SDHC goto EHL*1024
;
	ld 	hl, csdbuf+6
	ld	a, (hl)    ; else SDC calculation
	inc	hl
	ld	d, (hl)
	inc	hl
	ld 	e, (hl)  
	ex	de,hl      ; DE=csdbuf+8
	and	3
	add	hl, hl
	rla
	add	hl, hl
	rla
	ld	l, h
	ld	h, a
	inc	hl		; hl = c_size + 1
;
; c_size_mult = ix[10] + (ix[9] & 0x03) * 256
; c_size_mult >>= 7    ( 3 bits )
;
	inc	de
	inc	de
	ld	a, (de)		; A=(csdbuf+10)
	dec	de	
	rla
	ld	a, (de)		; A=(csdbuf+9)
	rla
	and	7
	ld	b, a		; b = c_size_mult
;
; read_bl_len = ix[5] & 0x0F  ( 4 bits )
;
	ld	a, (csdbuf+5)
	and	0Fh		; a = read_bl_len
	add	a, b
	sub	7		; a = c_size_mult + read_bl_len - 7
	ld	de, 0
;	jr	c, sderr	; ERROR - negative exponent
	jr	z, skipsl	; exponent=0 -> no shift
;
; dehl <<= a,  A is 1...31
;
	ld	b, a
sl_dehl:add	hl, hl
	rl	e
	rl	d
	djnz	sl_dehl
skipsl:	ld	(maxlba0),hl		; dehl = MaxLBA
	ld	(maxlba0+2),de
	pop	af
        pop     hl
        ret
;
; to initialize the SD card in SPI mode you should:
;
;    CMD0 arg: 0x0, CRC: 0x95 (response: 0x01) - note that in case of 0xFF or garbled response you should
; simply repeat this step; see below for more info.
;
;    CMD8 arg: 0x000001AA, CRC: 0x87 (response: 0x01, followed by echo of arg, in this case 0x000001AA) - 
; while it may seem that this command is optional, it's completely mandatory for newer cards. While 0x1AA
; is a common arg value here, you may actually pass other values as well; see "Table 7-5: Card Operation 
; for CMD8 in SPI Mode", p. 108 in spec for details. In short:
;   send CMD8 with value (0x48,0x00,0x00,0x01,0xAA,0x87) when receive R7 response (0x01,0x00,0x00,0x01,0xAA)
;
;    3a. CMD55 arg: 0x0, CRC: any, 0x65 actually (response: 0x01; CMD55 being the prefix to every ACMD;
;        if the response is 0x05, you've got an old card - repeat CMD1 with arg 0x0 [CRC 0xF9] instead
;        of CMD55/ACMD41)
;
;    3b. ACMD41 , arg: 0x40000000, CRC: any, 0x77 actually (note that this argument assumes the card is
;        a HCS one, which is usually the case; use 0x0 arg [CRC 0xE5] for older cards). If response is 0x0,
;        you're OK; if it's 0x01, goto 3; if it's 0x05, see 3a. above; if it's neither, something's wrong
;        with it (also see below).
;
; Most cards require steps 3a/3b (or CMD1 for old cards) to be repeated, usually at least once, even if you
; wait some time between them; i.e. the actual sequence is CMD0/CMD8/CMD55/ACMD41/CMD55/ACMD41 (or 
; CMD0/CMD8/CMD1/CMD1) - to be sure, try the CMD55/ACMD41 (or CMD1 if you got 0x05 from them) N times
; (select N within your reason; it's actually quite common to have to wait a couple hundred ms if the device
; is just after the power on, so aim for that), with small delays between the tries if you wish, and assume 
; fail if response 0 doesn't appear (i.e. if the device stays in IDLE mode for some reason). Also, receiving
; 0xFF from CMD0 is common if a device was in some "strange" state previously (e.g. hung up, got S?S?
; deasserted [high], had over-/undervoltage on some pins etc.) - just give it some time, rinse and repeat N
; times. A garbled response to CMD0 is quite OK sometimes - if you sent it a couple of times and the response
; is still neither 0xFF nor 0x01, try to go forward with CMD8. If it works - you're good to go; if it doesn't
; - it's probably broken.
;
; Besides, while the spec says that only CMD0 and CMD8 should have CRC in SPI mode, some SD cards (like
; Transcend ones) seem to require proper CRC for CMD55/ACMD41 - if you want to be on the safe side, simply
; use a precalculated value for them.
;
; http://www.electro-tech-online.com/threads/initialise-sd-sdhc-card.116467/
;
